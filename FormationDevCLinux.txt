
reférence url https://www.rocq.inria.fr/secret/Anne.Canteaut/COURS_C/cours.pdf

http://perso.telecom-paristech.fr/~dupouy/pdf/BCI/2-ProcessusBCI-07.pdf

http://www.lifl.fr/~marquet/ens/pdc/


Tp compilation n1
------------------------------------------------------------------------
créer un répertoire de travail (RGO) et le fichier 00-hello-ansi.c

inclure les fichiers headers

fonction clrscr()
effacer l'écran

gotoxy (colonne,ligne)
positionnner le curseur sur l'écran

fonction main
effacer écran
placer le curseur sur la colonne 5 et la ligne 10
avec la fonction printf afficher le message HelloWorld
insertion du code de retour EXIT_SUCCESS

compiler le fichier 00-hello-ansi.c

gcc -E 00-hello-ansi.c > 00-hello-ansi.i

gcc -S 00-hello-ansi.i

gcc -c 00-hello-ansi.s

gcc -o hello 00-hello-ansi.o


file hello -> description des caractèristiques du fichier


rm 00-hello-ansi.[iso]  -> suppression des fichiers .i .o et .s

gcc -o hello 00-hello-ansi.c




TP n°2
------------------------------------------------------------------------
faire un fichier fic02 contenant les methodes
clear screen
position du curseur
affichage hello world

faire une librairie
hello.h (interface )

le fichier ficmain appelle la methode
clear, position et affichage

gcc -o hello 01-ficmain.c 01-fic02.c




TP n°3  bibliothèque statique
------------------------------------------------------------------------
extension  .a


création d'une lib

gcc -c fic01.c fic02.c

mkdir libs

ar cr libs/libfic.a fic01.o fic02.o

afficher le contenu d'une lib
ar t libfic.a
nm -s libfic.a
nm -s --defined-only libs/libfic.a


remplacer une librairie
ar r libs/libfic.a fic03.o

ajouter
ar a libs/libfic.a fic03.o

détruire
ar d libs/libfic.a fic03.o

compiler
gcc -o ficmain ficmain.c ./libs/libfic.a


tp n° 4 - Bibliothèque dynamique
------------------------------------------------------------------------
fichier en .so
shared object

l'editeur de liens dynamiques localise le biblio partagée et la charge en memoire


compiler avec les options suivantes
-fPIC   code relogeable (position independent code)
-shared pour créer lors de la compilation la biblio partagée
-Wl enregistre l'entête de la biblio et la transmet la valeur -soname

mkdir /lib
gcc -fPIC -shared -Wl,-soname,libfic.so.1 -o libs/libfic.so.1.0 fic01.c fic02.c
Attention: pas d'espace dans cette zone "-Wl,-soname,libfic.so.1"

// faire un lien symbolique dans le répertoire libs
ln -sf  libfic.so.1 libfic.so

dans /etc/ld.so.conf.d
créer un fichier pmylibs.conf
ajouter le chemin du répertoire où se trouve la biblio

actualiser le cache avec ldconfig
ldconfig
ldconfig -v | grep libfic



tp n° 5 - gestion des processus - 03-processus
------------------------------------------------------------------------
créer le fichier 01a_perfils.c
déterminer les fichiers headers

fonction main sans passage d'argument et avec passage de code retour

appel de la fonction fork
si le retour de la fonction fork = 0
afficher je suis le fils mon pid est x et mon ppid est y
sinon
afficher je suis le pere mon pid est x le pid de mon fils est y
finsi

valeur du code de retour =0
fin fonction main

tp n°6 - primitives de recouvrement 01b_perfils.c
------------------------------------------------------------------------

fonction main sans passage d'arguments et sans code retour

appel de la donction fork
si retour de la fonction fork =-1 alors
erreur de création de processus
sinon
si retour de la fonction fork()=0 alors
je suis le fils mon pid est x mon ppid est y recouvrement par le processus ls -l
sinon
je suis le pere mon pid est x le pid de mon fils est y
wait
finsi
fin de main


tp n° 6 - primitives de recouvrement
-------------------------------------------------------------------------
fonction main sans passage d'argument et avec un code retour

déclaration de variable
message donnez la valeur de i et saisir l'entier i
message donnez la valeur de j et saisie l'entier j

appel de la fonction fork()

si le retour de la fonction fork()=0 alors
convertir i en chaine de caractère de 11 éléments dans la variable conv1
convertir j en chaine de caractère de 11 éléments dans la variable conv2

recouvrement par le processus 03b_calculer avec les arguments conv1, conv2
sinon attendre le fils
finsi
fin fonction main



03b_calculer
fonction main avec passage d'arguments et sans code de retour
si le nombre d'argument n'est pas correct alors
afficher erreur
sortir du programme
finsi

faire l'addition des deux arguments
stocker le resultat dans la variable sum
affiche la somme de x = sum
fin fonction main

scanf
Sprintf
atoi alphaToInteger
execl recouvrement


tp N°7 - thread
-------------------------------------------------------------------------
04a_threads.c

définir les attributs par défaut
définir la constante pthread_attr_default à null

créer une methode f_thread
    afficher le pid du thread et son identifiant
fin méthode


main
créer un compteur i
pour compteur de 0 à 3 exclus
créer un thread
afficher le pid et l'identidfiant du thread
join le thread

retour 0
fin main

tp N°8 - processus zombie
-------------------------------------------------------------------------
06_zombie.c

fonction main
 sans arg et avec code retour
 appel de la fonction fork()

le père dort
le fils sort immediatement


 gcc -o zombie 06_zombie.c

lancer l'exec en sous tache
 ./zombie&

 visualiser le zombie cde top
 ps xaf

killer le processus zombie
 La seule manière d’éliminer ces processus zombies consiste
 à causer la mort du processus parent, par exemple au moyen du signal SIGKILL
 xkill

tp N°9 - ordonnancement
-------------------------------------------------------------------------
07_ordo.c



tp N°10 - gestion de fichier
-------------------------------------------------------------------------
01_manipfic.c

fonction clrscr
effacer l'écran
fin fonction

fonction main
créer une structure eleve
    nom de 10 caractères
    note integer
fin structure

ouvrir un fichier note.dat mode read write et mode read user et write user

si erreur dans la création
afficher l'erreur
finsi

pour i =0 to 4
 afficher nom de l'élève
 récupérer la saisie
 set  eleve.nom
 afficher la note
 récupérer la saisie
 set eleve.note
 ecrire l'élève dans le fichier
fin pour

positionner le curseur en début de fichier
lire le fichier
afficher le nom et la note

fermer le fichier



